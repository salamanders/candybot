 //"tensorflow/": "https://cdn.jsdelivr.net/npm/@tensorflow/",
 //"tensorflow-models/": "https://cdn.jsdelivr.net/npm/@tensorflow-models/"

   <script async src="https://unpkg.com/es-module-shims@1.6.2/dist/es-module-shims.js"></script>
    <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@0.145.0/build/three.module.js",
          "three/addons/": "https://unpkg.com/three@0.145.0/examples/jsm/"
        }
      }
    </script>

     // import crypto from 'https://cdn.skypack.dev/crypto-browserify';
 // import lodash from 'https://cdn.skypack.dev/three-nebula';

         "crypto-es": "https://unpkg.com/crypto-es@1.2.7/"
                    "tensorflow/": "https://cdn.jsdelivr.net/npm/@tensorflow/",
          "tensorflow-models/": "https://cdn.jsdelivr.net/npm/@tensorflow-models/"
                  #videoCanvas {
            background-color: rgb(0, 0, 0);
            border: solid 1px #005;
            transform: scale(-1, 1);
            z-index: 1;
import * as tfc from '@tensorflow/tfjs-core';
import * as tfconverter from '@tensorflow/tfjs-converter';
import * as tfback from '@tensorflow/tfjs-backend-webgl';
import poseDetection from '@tensorflow-models/pose-detection';
//ALT <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm/dist/tf-backend-wasm.js"></script> -->



        }
                /*

        this.videoOutCtx.fillText(`${Math.round(this.#looper.totalTimeMs)}ms`, 0, 0);
        if (poses && poses[0] && poses[0].keypoints && poses[0].keypoints.length > 0) {
            this.#displayKeypoints(poses[0].keypoints);
            this.#logKeypoints(poses[0].keypoints);
        } else {
            console.debug("No pose found, skipping.");
        }

         */



html, body {
    background-color: darkblue;
    margin: 0;  /* Make sure that there is no margin around the canvas */
    overflow: hidden;  /* Make sure we don't get scroll bars. */
    height: 100%;
}

.hidden {
    display: none;
}
#c {
    width: 100%;
    height: 100%;
    display: block; /* The default display, inline, would add small margin below the canvas */
}
/*
canvas {
    position: absolute;
    top: 0; left: 0;
}
#videoCanvas {
    background-color: rgb(0, 0, 0);
    border: solid 1px #005;
    transform: scale(-1, 1);
    z-index: 1;
}
#effectsCanvas {
    border: solid 1px #050;
    z-index: 2;
}
*/
export function stringifyRounded(val) {
    // round the long decimals to int
    return val.toFixed ? Number(val.toFixed(0)) : val;
}


<video autoplay class="hidden" height="480" id="video" width="640"></video>
    function matchRendererToDisplaySize() {
        if (canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight || !firstResize) {
            console.debug(`resizeRendererToDisplaySize needResize to ${canvas.clientWidth}, ${canvas.clientHeight}`)
            renderer.setSize(canvas.clientWidth, canvas.clientHeight, false);
            camera.right = canvas.width;
            camera.bottom = canvas.height;
            camera.updateProjectionMatrix();
            firstResize = true;
        }
    }

import {RateLimitMjs} from "./rate-limit.mjs.old";
import {SimpleVideo} from "./simple-video.js";

 extends SimpleVideo {

    /** @type {RateLimitMjs} */
    #looper;



    async run() {
        await Promise.all([super.run(), this.#createPoseDetector()]);
        //this.updateDimensions();
        this.#looper = new RateLimitMjs(async () => {
            await this.#estimatePoses()
        }, .2, 100);
        await this.#looper.run();
    }


    /**
     * @param {{score: number, x: number, y:number, name: string}[]} keypoints
     */
    #displayKeypoints(keypoints) {
        this.videoOutCtx.font = "1em sans-serif";
        this.videoOutCtx.fillStyle = "#00ffff";
        this.videoOutCtx.strokeStyle = "#00ffff";
        this.videoOutCtx.textBaseline = "top";
        this.videoOutCtx.lineWidth = 2;

        // Draw the named points
        keypoints.filter(({score}) => score >= 0.3).forEach(({x, y, name}) => {
            const realX = x * this.displayDimensions.scale;
            const realY = y * this.displayDimensions.scale;
            this.videoOutCtx.fillText(name, realX, realY);
            // `(${Math.round(x)}, ${Math.round(y)}) ${name} = ${Math.round((score + Number.EPSILON) * 100) / 100}`);
        });

        // Draw the Skeleton
        SimplePose.CONNECTED_PAIRS
            .filter(([p1, p2]) => keypoints[p1].score >= 0.3 && keypoints[p2].score >= 0.3)
            .forEach(([p1, p2]) => {

            });
    }


    /**
     * @param {{score: number, x: number, y:number, name: string}[]} keypoints
     */
    #logKeypoints(keypoints) {
        (async () => {
            const rawResponse = await
    }
}






<script src="./js/sparkles.js" type="text/javascript"></script>
<script src="./js/main.mjs" type="module"></script>




